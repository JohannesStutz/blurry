# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['blur', 'find_faces', 'blur_areas', 'anonymize', 'load_img', 'test_bulk']

# Cell
import cv2
import numpy as np
import fastcore
import math
from pathlib import Path
from PIL import Image

# Cell
def blur(img: np.ndarray, kernel_size=5, sigma_x=0) -> np.ndarray:
    # Make sure that kernel size is an odd number
    if kernel_size % 2 == 0:
        kernel_size += 1
    return cv2.GaussianBlur(img, (kernel_size, kernel_size), sigma_x)

# Cell
def find_faces(img):
    "Finds faces in a picture and returns tuples of (x, y, w, h) for each face"
    face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.1, 4)
    return faces

# Cell
def blur_areas(img, areas, factor=1):
    """
    Blurs defined areas in a cv2 image.

    Inputs:
    img: cv2 image in BGR format
    areas: tuples of (x, y, w, h)
    factor: increase (>1.0) or decrease (<1.0) default blurring

    Returns:
    cv2 image in BGR format
    """
    for (x, y, w, h) in areas:
        kernel_size = max(w,h)/3
        kernel_size *= factor
        kernel_size = math.ceil(kernel_size)
        img[y:y+h,x:x+w] = blur(img[y:y+h,x:x+w], kernel_size=kernel_size)
    return img

# Cell
def anonymize(img, factor=1, convert2rgb=True)->np.ndarray:
    faces = find_faces(img)
    img = blur_areas(img, faces, factor=factor)
    if convert2rgb:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    return img

# Cell
def load_img(fn):
    img = cv2.imread(str(fn))
    assert isinstance(img, np.ndarray), "Image file not found"
    return img

# Cell
def test_bulk(directory, **kwargs):
    path = Path(directory)
    for fn in path.ls():
        blurred = anonymize(load_img(fn), **kwargs)
        show_inline_img(blurred)